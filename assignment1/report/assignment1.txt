
AI & MAS

Assignment 1



Exercise 1 - Search strategies:


a) 
Benchmark:
<From Client> Summary for Breadth-first Search
<From Client> Found solution of length 19
<From Client> #Explored:   78, #Frontier:   2, Time: 0.07 s     [Used: 11.52 MB, Free: 233.98 MB, Alloc: 245.50 MB, MaxAlloc: 3641.00 MB]
success


b) 
Benchmark:
<From Client> Summary for Breadth-first Search
<From Client> #Explored: 147800, #Frontier: 57021, Time: 299.93 s   [Used: 6244.04 MB, Free: 1037.96 MB, Alloc: 7282.00 MB, MaxAlloc: 7282.00 MB]
<From Client> Time limit reached, terminating search [Used: 6244.04 MB, Free: 1037.96 MB, Alloc: 7282.00 MB, MaxAlloc: 7282.00 MB]
<From Client> Unable to solve level

Explanation:
It can seem like there are many more solutions, because of the now 4 A's, and not just one. However, only one of the A's can be pushed into the goal due to the ``Sobako ??????'' rule.
- So even with 8GB of RAM allocated it is not possible. 

Quite a few nodes have been explored.



c)
Implementing StrategyDFS using the same ArrayDeque - but now 
Benchmark:

SAD1
<From Client> Summary for Depth-first Search
<From Client> Found solution of length 27
<From Client> #Explored:   44, #Frontier:  22, Time: 0.05 s     [Used: 8.96 MB, Free: 236.54 MB, Alloc: 245.50 MB, MaxAlloc: 3641.00 MB]
success

SAD2
<From Client> Summary for Depth-first Search
<From Client> Found solution of length 5781
<From Client> #Explored: 6799, #Frontier: 13263, Time: 4.57 s   [Used: 599.20 MB, Free: 395.80 MB, Alloc: 995.00 MB, MaxAlloc: 7282.00 MB]
success



d) 

Benchmark - custom:

<From Client> Summary for Depth-first Search
<From Client> Found solution of length 45
<From Client> #Explored:   60, #Frontier: 106, Time: 0.06 s     [Used: 11.52 MB, Free: 233.98 MB, Alloc: 245.50 MB, MaxAlloc: 7282.00 MB]
success

<From Client> Search starting with strategy Breadth-first Search
<From Client> #Explored: 172400, #Frontier: 49692, Time: 299.59 s   [Used: 6292.14 MB, Free: 989.86 MB, Alloc: 7282.00 MB, MaxAlloc: 7282.00 MB]
<From Client> Time limit reached, terminating search [Used: 6316.39 MB, Free: 965.61 MB, Alloc: 7282.00 MB, MaxAlloc: 7282.00 MB]
<From Client> Unable to solve level

Level:
The custom designed level is a derivation of SAD2, where some of the possible spaces are filled to limit the possible movements. The possible A's are also moved a little bit. 




Exercise 2 - Optimizations


a) 

1) ????
2) The number of columns are used when instantiating the node
Benchmark:

b) "The locations of boxes in a level are not static. Explain which data structure would allow you to save memory in most levels, while still offering good performance when it comes to lookup. In terms of running time, what would the impact of such a modification be on isGoalState() and getExpandedNodes()"

???



Exercise 3 - Heuristics


a) "Write a best-first search client by implementing the StrategyBestFirst class. The Heuristic argument in the constructor must be used to order nodes. As it implements the Comparator<Node> interface it integrates well with the Java Collections library. Make sure you use an appropriate data structure for the frontier, and state which one you have used."


The frontier is a List. When a node (the one with the lowest f(n)) is poped from the frontier, the frontier is cleared in order to make a new frontier based on the chosen node. The remaining nodes in the frontier, before clearing it, is stored as an old frontier - in order to go back to that, if the new one proves to be a dead end. 

Actually I use two frontiers. 


b)
Heuristic function
The heuristic functions functions calculates the distance from the agent to the goal. The goal coordinates are found in the pre-processing.


c) 
Admissibility:


d) Competition levels:











